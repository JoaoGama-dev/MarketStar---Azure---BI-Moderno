{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nome do Data Factory",
			"defaultValue": "dfMarketStar"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/tblsrcProdutor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsservmarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "src",
					"table": "Produtor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblsrcRegioes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsservmarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DDD",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Cidade",
						"type": "varchar"
					},
					{
						"name": "Estado",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "src",
					"table": "Regioes"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblsrcStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsservmarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "src",
					"table": "Status"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblsrcTipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsservmarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "src",
					"table": "TipoPagamento"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblstgAfiliados')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsservmarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					},
					{
						"name": "DataInicio",
						"type": "date"
					},
					{
						"name": "DataFim",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "Afiliados"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblstgCursos')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsservmarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CodProdOrigine",
						"type": "varchar"
					},
					{
						"name": "Nome",
						"type": "varchar"
					},
					{
						"name": "DataInicio",
						"type": "date"
					},
					{
						"name": "DataFim",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "Cursos"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblstgProdutor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsservmarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					},
					{
						"name": "DataInicio",
						"type": "date"
					},
					{
						"name": "DataFim",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "Produtor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblstgRegioes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsservmarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DDD",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Cidade",
						"type": "varchar"
					},
					{
						"name": "Estado",
						"type": "varchar"
					},
					{
						"name": "DataInicio",
						"type": "date"
					},
					{
						"name": "DataFim",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "Regioes"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblstgStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsservmarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					},
					{
						"name": "DataInicio",
						"type": "date"
					},
					{
						"name": "DataFim",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "Status"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblstgTipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsservmarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					},
					{
						"name": "DataInicio",
						"type": "date"
					},
					{
						"name": "DataFim",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "TipoPagamento"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfCursos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtCodCursosOrigem",
								"type": "DatasetReference"
							},
							"name": "CodProdutos"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtCursosDestino",
								"type": "DatasetReference"
							},
							"name": "CursosSilver"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CodProdutos",
						"CodProdutos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['cursos.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> CursosSilver"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExtAfiliados')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartOrigem",
								"type": "DatasetReference"
							},
							"name": "srcVendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtAfiliadosDestino",
								"type": "DatasetReference"
							},
							"name": "AfiliadoSilver",
							"description": "Adicionar conjunto de dados do coletor a camada Silver no DataLake",
							"rejectedDataLinkedService": {
								"referenceName": "dlMkStar",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "SelecionarColuna"
						},
						{
							"name": "AgregAuxiliar",
							"description": "Adicionar colunas agregadas Afiliados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Produto as string,",
						"          Afiliado as string,",
						"          {Nome do Produtor} as string,",
						"          {Documento do Produtor} as string,",
						"          {Meio de Pagamento} as string,",
						"          {Preço do Produto} as string,",
						"          {Preço da Oferta} as string,",
						"          {Tipo de Pagamento} as string,",
						"          {Tipo pagamento oferta} as string,",
						"          Moeda as string,",
						"          {Número da Parcela} as string,",
						"          {Recorrência} as string,",
						"          {Data de Venda} as string,",
						"          {Data de Confirmação} as string,",
						"          Status as string,",
						"          DDD as string,",
						"          Cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcVendas",
						"srcVendas select(mapColumn(",
						"          Afiliado",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelecionarColuna",
						"SelecionarColuna aggregate(groupBy(Afiliado),",
						"     Contagem = count(Afiliado)) ~> AgregAuxiliar",
						"AgregAuxiliar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Afiliados.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Afiliado",
						"     ),",
						"     partitionBy('hash', 1)) ~> AfiliadoSilver"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExtMacroRegiao')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtMacroRegioesOrigem",
								"type": "DatasetReference"
							},
							"name": "MacroRegiaoOrigem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtMacroRegiaoDestino",
								"type": "DatasetReference"
							},
							"name": "RegioesSilver"
						}
					],
					"transformations": [
						{
							"name": "dddcidadeestado"
						},
						{
							"name": "splitEstadoCidade"
						},
						{
							"name": "RegioesSeparadas"
						},
						{
							"name": "SelecionarColunasFinais"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MacroRegiaoOrigem",
						"MacroRegiaoOrigem derive(dddCidadeEstado = substring(Column_1, 4, 400)) ~> dddcidadeestado",
						"dddcidadeestado derive(splitdddCidadeEstado = split(dddCidadeEstado,\"–\" )) ~> splitEstadoCidade",
						"splitEstadoCidade derive(DDD = trim(splitdddCidadeEstado[1]),",
						"          CIDADE = left(trim(splitdddCidadeEstado[2]),length(trim(splitdddCidadeEstado[2]))-1),",
						"          ESTADO = trim(splitdddCidadeEstado[3])) ~> RegioesSeparadas",
						"RegioesSeparadas select(mapColumn(",
						"          DDD,",
						"          CIDADE,",
						"          ESTADO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelecionarColunasFinais",
						"SelecionarColunasFinais sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:['regioes.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> RegioesSilver"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExtProdutor')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartOrigem",
								"type": "DatasetReference"
							},
							"name": "Vendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtProdutorDestino",
								"type": "DatasetReference"
							},
							"name": "produtorSilver"
						}
					],
					"transformations": [
						{
							"name": "aggAuxiliar",
							"description": "Agregação de dados pela produção de colunas 'Contagem' por 'produtor'"
						},
						{
							"name": "SelecionarColuna",
							"description": "Renomeando aggAuxiliar para SelecionarColuna com as colunas 'Produtor'"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Produto as string,",
						"          Afiliado as string,",
						"          {Nome do Produtor} as string,",
						"          {Documento do Produtor} as string,",
						"          {Meio de Pagamento} as string,",
						"          {Preço do Produto} as string,",
						"          {Preço da Oferta} as string,",
						"          {Tipo de Pagamento} as string,",
						"          {Tipo pagamento oferta} as string,",
						"          Moeda as string,",
						"          {Número da Parcela} as string,",
						"          {Recorrência} as string,",
						"          {Data de Venda} as string,",
						"          {Data de Confirmação} as string,",
						"          Status as string,",
						"          DDD as string,",
						"          Cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Vendas",
						"Vendas aggregate(groupBy({Nome do Produtor}),",
						"     Contagem = count()) ~> aggAuxiliar",
						"aggAuxiliar select(mapColumn(",
						"          {Nome do Produtor}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelecionarColuna",
						"SelecionarColuna sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Afiliado as string",
						"     ),",
						"     partitionFileNames:['produtor.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> produtorSilver"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExtStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartOrigem",
								"type": "DatasetReference"
							},
							"name": "Vendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtStatusDestino",
								"type": "DatasetReference"
							},
							"name": "Status"
						}
					],
					"transformations": [
						{
							"name": "aggAuxiliar"
						},
						{
							"name": "SelecionarColuna"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Produto as string,",
						"          Afiliado as string,",
						"          {Nome do Produtor} as string,",
						"          {Documento do Produtor} as string,",
						"          {Meio de Pagamento} as string,",
						"          {Preço do Produto} as string,",
						"          {Preço da Oferta} as string,",
						"          {Tipo de Pagamento} as string,",
						"          {Tipo pagamento oferta} as string,",
						"          Moeda as string,",
						"          {Número da Parcela} as string,",
						"          {Recorrência} as string,",
						"          {Data de Venda} as string,",
						"          {Data de Confirmação} as string,",
						"          Status as string,",
						"          DDD as string,",
						"          Cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Vendas",
						"Vendas aggregate(groupBy(Status),",
						"     Contagem = count(Status)) ~> aggAuxiliar",
						"aggAuxiliar select(mapColumn(",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelecionarColuna",
						"SelecionarColuna sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Afiliado as string",
						"     ),",
						"     partitionFileNames:['Status.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Status"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExtTipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartOrigem",
								"type": "DatasetReference"
							},
							"name": "Vendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtTipoPagamentoDestino",
								"type": "DatasetReference"
							},
							"name": "TipoPagamentoSilver"
						}
					],
					"transformations": [
						{
							"name": "aggAuxliar"
						},
						{
							"name": "SelecionarColuna"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Produto as string,",
						"          Afiliado as string,",
						"          {Nome do Produtor} as string,",
						"          {Documento do Produtor} as string,",
						"          {Meio de Pagamento} as string,",
						"          {Preço do Produto} as string,",
						"          {Preço da Oferta} as string,",
						"          {Tipo de Pagamento} as string,",
						"          {Tipo pagamento oferta} as string,",
						"          Moeda as string,",
						"          {Número da Parcela} as string,",
						"          {Recorrência} as string,",
						"          {Data de Venda} as string,",
						"          {Data de Confirmação} as string,",
						"          Status as string,",
						"          DDD as string,",
						"          Cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Vendas",
						"Vendas aggregate(groupBy({Tipo de Pagamento}),",
						"     Contagem = count({Tipo de Pagamento})) ~> aggAuxliar",
						"aggAuxliar select(mapColumn(",
						"          {Tipo de Pagamento}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelecionarColuna",
						"SelecionarColuna sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Afiliado as string",
						"     ),",
						"     partitionFileNames:['TipoPagamento.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> TipoPagamentoSilver"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExtVendasHotmart')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartOrigem",
								"type": "DatasetReference"
							},
							"name": "VendasHotmart"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartDestino",
								"type": "DatasetReference"
							},
							"name": "VendasHotMartDestinon"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Produto as string,",
						"          Afiliado as string,",
						"          {Nome do Produtor} as string,",
						"          {Documento do Produtor} as string,",
						"          {Meio de Pagamento} as string,",
						"          {Preço do Produto} as string,",
						"          {Preço da Oferta} as string,",
						"          {Tipo de Pagamento} as string,",
						"          {Tipo pagamento oferta} as string,",
						"          Moeda as string,",
						"          {Número da Parcela} as string,",
						"          {Recorrência} as string,",
						"          {Data de Venda} as string,",
						"          {Data de Confirmação} as string,",
						"          Status as string,",
						"          DDD as string,",
						"          Cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> VendasHotmart",
						"VendasHotmart sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Afiliado as string",
						"     ),",
						"     partitionFileNames:['vendas.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> VendasHotMartDestinon"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfpreAfiliados')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3 - Presentation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblstgAfiliados",
								"type": "DatasetReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblpreAfiliados",
								"type": "DatasetReference"
							},
							"name": "PreAfiliados"
						}
					],
					"transformations": [
						{
							"name": "Ativos"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"Source filter(isNull(DataFim)) ~> Ativos",
						"Ativos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK as integer,",
						"          BK as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK,",
						"          Nome",
						"     )) ~> PreAfiliados"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblstgAfiliados')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfpreCursos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3 - Presentation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblstgCursos",
								"type": "DatasetReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblpreCursos",
								"type": "DatasetReference"
							},
							"name": "preCursos"
						}
					],
					"transformations": [
						{
							"name": "ativos"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          CodProdOrigine as string,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"Source filter(isNull(DataFim)) ~> ativos",
						"ativos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK as integer,",
						"          BK as string,",
						"          CodProdOrigine as string,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK,",
						"          CodProdOrigine,",
						"          Nome",
						"     )) ~> preCursos"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblstgCursos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfpreProdutor')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3 - Presentation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblstgProdutor",
								"type": "DatasetReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblpreProdutor",
								"type": "DatasetReference"
							},
							"name": "preProdutor"
						}
					],
					"transformations": [
						{
							"name": "ativos"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"Source filter(isNull(DataFim)) ~> ativos",
						"ativos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK as integer,",
						"          BK as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK,",
						"          Nome",
						"     )) ~> preProdutor"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblstgProdutor')]"
			]
		}
	]
}